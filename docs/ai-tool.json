{
  "name": "aurynx/http-compression",
  "language": "php",
  "purpose": "Efficient HTTP compression for responses and static assets.",
  "package_id": "aurynx/http-compression",
  "install": "composer require aurynx/http-compression",
  "repository": "https://github.com/aurynx/http-compression",
  "usage_modes": ["dynamic-response", "build-time-precompression"],
  "entrypoints": [
    {
      "namespace": "Aurynx\\HttpCompression",
      "class": "CompressorFacade",
      "summary": "Batch facade to collect inputs and compress with gzip, brotli, zstd.",
      "methods": [
        { "name": "make", "static": true, "params": [], "returns": "self" },
        { "name": "once", "static": true, "params": [], "returns": "SingleItemFacade" },
        { "name": "add", "params": ["CompressionInput $input", "?ItemConfig $config = null"], "returns": "self" },
        { "name": "addMany", "params": ["iterable $inputs"], "returns": "self" },
        { "name": "addFile", "params": ["string $path", "?ItemConfig $config = null", "?string $id = null"], "returns": "self" },
        { "name": "addData", "params": ["string $data", "?ItemConfig $config = null", "?string $id = null"], "returns": "self" },
        { "name": "addGlob", "params": ["string $pattern", "?ItemConfig $config = null"], "returns": "self" },
        { "name": "addFrom", "params": ["InputProviderInterface $provider", "?ItemConfig $config = null"], "returns": "self" },
        { "name": "item", "params": ["callable $callback"], "returns": "self" },
        { "name": "withDefaultConfig", "params": ["ItemConfig $config"], "returns": "self" },
        { "name": "toDir", "params": ["string $dir", "bool $keepStructure = false"], "returns": "self" },
        { "name": "inMemory", "params": ["int $maxBytes = 5000000"], "returns": "self" },
        { "name": "failFast", "params": ["bool $enable = true"], "returns": "self" },
        { "name": "skipExtensions", "params": ["array $extensions"], "returns": "self" },
        { "name": "skipAlreadyCompressed", "params": [], "returns": "self" },
        { "name": "compress", "params": [], "returns": "CompressionResult" }
      ]
    },
    {
      "namespace": "Aurynx\\HttpCompression",
      "class": "SingleItemFacade",
      "summary": "Simple facade for single file/data compression.",
      "methods": [
        { "name": "file", "params": ["string $path"], "returns": "self" },
        { "name": "data", "params": ["string $data"], "returns": "self" },
        { "name": "withGzip", "params": ["int $level = 6"], "returns": "self" },
        { "name": "withBrotli", "params": ["int $level = 11"], "returns": "self" },
        { "name": "withZstd", "params": ["int $level = 3"], "returns": "self" },
        { "name": "withAlgorithm", "params": ["AlgorithmEnum $algo", "int $level"], "returns": "self" },
        { "name": "compress", "params": [], "returns": "CompressionItemResult" },
        { "name": "saveTo", "params": ["string $path"], "returns": "void", "note": "Requires exactly one algorithm" }
      ]
    }
  ],
  "enums": [
    { "name": "AlgorithmEnum", "values": ["gzip", "brotli", "zstd"] }
  ],
  "defaults": {
    "levels": { "gzip": 6, "brotli": 4, "zstd": 3 },
    "prefer_order": ["brotli", "zstd", "gzip"]
  },
  "constraints": {
    "php": {
      "version": "^8.4",
      "supported": ["8.4.x", "8.5.x", "8.6.x"]
    },
    "psr": ["PSR-12"],
    "extensions": {
      "gzip": "ext-zlib (required)",
      "brotli": "ext-brotli (optional)",
      "zstd": "ext-zstd (optional)"
    },
    "memory": "Use inMemory(maxBytes) or ItemConfig::create()->limitBytes() to guard large payloads"
  },
  "artifacts": {
    "examples": [
      "examples/api-response.php",
      "examples/precompress.php",
      "examples/graceful-batch.php"
    ],
    "configs": [
      "examples/nginx.conf",
      "examples/apache.conf"
    ],
    "static_extensions": { "gzip": ".gz", "brotli": ".br", "zstd": ".zst" }
  },
  "recipes": [
    {
      "name": "Compress API JSON by Accept-Encoding",
      "steps": [
        "Parse Accept-Encoding",
        "Pick best supported algorithm (brotli > zstd > gzip)",
        "Use CompressorFacade::once()->data()->with{Algo}(...)",
        "Compress and return {content, encoding}"
      ],
      "notes": [
        "Set Vary: Accept-Encoding",
        "Fallback to identity if none supported"
      ]
    },
    {
      "name": "Precompress static files for nginx/apache",
      "steps": [
        "Use CompressorFacade::make()",
        "addGlob with patterns (brace expansion supported)",
        "withDefaultConfig(ItemConfig::create()->withGzip(9)->withBrotli(11)->build())",
        "skipAlreadyCompressed()",
        "toDir(keepStructure: true)",
        "compress"
      ],
      "paths": ["public/**/*.html", "public/**/*.css", "public/**/*.js"]
    },
    {
      "name": "Batch with graceful mode",
      "steps": [
        "failFast(false)",
        "addFile/addGlob",
        "compress",
        "iterate CompressionResult and check isOk()/getFailureReason()"
      ]
    }
  ],
  "non_goals": [
    "Does not set HTTP headers automatically"
  ],
  "safety": [
    "Use failFast(false) for user-facing paths to collect errors",
    "Use limitBytes()/inMemory() limits for large payloads",
    "Optional algorithms require PHP extensions"
  ],
  "hints_for_agents": [
    "Prefer algorithms in order brotli > zstd > gzip",
    "For dynamic responses, set Content-Encoding and Vary: Accept-Encoding",
    "For build-time precompression, use highest levels (gzip:9, brotli:11, zstd:19)"
  ]
}
